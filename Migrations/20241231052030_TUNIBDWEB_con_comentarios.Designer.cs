// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TUNIWEB.Models;

namespace TUNIWEB.Migrations
{
    [DbContext(typeof(TUNIDbContext))]
    [Migration("20241231052030_TUNIBDWEB_con_comentarios")]
    partial class TUNIBDWEB_con_comentarios
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TUNIWEB.Models.Admon", b =>
                {
                    b.Property<Guid>("idAmon")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("contraseña")
                        .IsRequired();

                    b.Property<string>("username")
                        .IsRequired();

                    b.HasKey("idAmon");

                    b.ToTable("Administradores");

                    b.HasData(
                        new { idAmon = new Guid("b4e34e4b-7d44-410d-a188-77aa9c8cee73"), contraseña = "123aEFGJnfsa", username = "ADMINISTRADOR 1" },
                        new { idAmon = new Guid("5854c2c8-8165-41f4-b78b-467611636988"), contraseña = "aggvkKBQ5hp", username = "ADMINISTRADOR 2" },
                        new { idAmon = new Guid("17bc9a5b-e5e0-4a42-8df0-a68295d9ba36"), contraseña = "HzmJlaLKU1f", username = "ADMINISTRADOR 3" },
                        new { idAmon = new Guid("062f002f-2072-4f29-8157-340b629547b6"), contraseña = "Xmxg82RTiuQV", username = "ADMINISTRADOR 4" },
                        new { idAmon = new Guid("b8ea4352-8397-4184-9834-b4ed45ea08cd"), contraseña = "bgTR1apIK1ye", username = "ADMINISTRADOR 5" }
                    );
                });

            modelBuilder.Entity("TUNIWEB.Models.Alumno", b =>
                {
                    b.Property<Guid>("idAlumno");

                    b.Property<string>("apMaterno")
                        .IsRequired();

                    b.Property<string>("apPaterno")
                        .IsRequired();

                    b.Property<string>("nombre")
                        .IsRequired();

                    b.HasKey("idAlumno");

                    b.ToTable("alumnos");
                });

            modelBuilder.Entity("TUNIWEB.Models.areasCarrera", b =>
                {
                    b.Property<int>("idArea")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("area");

                    b.HasKey("idArea");

                    b.ToTable("catAreasCarrera");

                    b.HasData(
                        new { idArea = 1, area = "Fisico matematicas" },
                        new { idArea = 2, area = "Ciencias Biologicas, Quimicas de la salud" },
                        new { idArea = 3, area = "Ciencias Sociales y administrativas" },
                        new { idArea = 4, area = "Humanidades y de las Artes" }
                    );
                });

            modelBuilder.Entity("TUNIWEB.Models.areasTest", b =>
                {
                    b.Property<int>("areaTestId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("areaDelTest");

                    b.HasKey("areaTestId");

                    b.ToTable("AreasTests");

                    b.HasData(
                        new { areaTestId = 1, areaDelTest = "Servicio Social" },
                        new { areaTestId = 2, areaDelTest = "Ejecutiva Persuasiva" },
                        new { areaTestId = 3, areaDelTest = "Verbal" },
                        new { areaTestId = 4, areaDelTest = "Artistico Plastico" },
                        new { areaTestId = 5, areaDelTest = "Musical" },
                        new { areaTestId = 6, areaDelTest = "Organizacion" },
                        new { areaTestId = 7, areaDelTest = "Cientifica" },
                        new { areaTestId = 8, areaDelTest = "Calculo" },
                        new { areaTestId = 9, areaDelTest = "Mecanico Constructivo" },
                        new { areaTestId = 10, areaDelTest = "Aire Libre" },
                        new { areaTestId = 11, areaDelTest = "Destreza manual" }
                    );
                });

            modelBuilder.Entity("TUNIWEB.Models.carBeca", b =>
                {
                    b.Property<int>("noBeca")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("becaInstitucional");

                    b.Property<byte[]>("doc");

                    b.Property<Guid>("idUniversidad");

                    b.HasKey("noBeca");

                    b.HasIndex("idUniversidad");

                    b.ToTable("carBecas");
                });

            modelBuilder.Entity("TUNIWEB.Models.carrerasDeseadas", b =>
                {
                    b.Property<int>("noDeCarreraDeseada")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("idAlumno");

                    b.Property<int>("idCarrera");

                    b.HasKey("noDeCarreraDeseada");

                    b.HasIndex("idAlumno");

                    b.HasIndex("idCarrera");

                    b.ToTable("carrerasDeseadas");
                });

            modelBuilder.Entity("TUNIWEB.Models.carrerasimpartidas", b =>
                {
                    b.Property<int>("noderelacion")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("catCarrerasId");

                    b.Property<Guid>("usuarioUniversidad");

                    b.HasKey("noderelacion");

                    b.HasIndex("catCarrerasId");

                    b.HasIndex("usuarioUniversidad");

                    b.ToTable("carrerasImpartadas");
                });

            modelBuilder.Entity("TUNIWEB.Models.carreraTecnica", b =>
                {
                    b.Property<int>("noderelcat")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("catalogoCarrerasTecnicasId");

                    b.Property<Guid>("idAlumno");

                    b.HasKey("noderelcat");

                    b.HasIndex("idAlumno");

                    b.ToTable("carreraTecnicas");
                });

            modelBuilder.Entity("TUNIWEB.Models.catalogoCarrerasTecnicas", b =>
                {
                    b.Property<int>("carreTecnicaId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("carreraTecnica");

                    b.Property<int?>("relcart_Catnoderelcat");

                    b.HasKey("carreTecnicaId");

                    b.HasIndex("relcart_Catnoderelcat");

                    b.ToTable("catalogoCarrerasT");

                    b.HasData(
                        new { carreTecnicaId = 1, carreraTecnica = "Tecnico en informatica" },
                        new { carreTecnicaId = 2, carreraTecnica = "Tecnico en enfermeria" },
                        new { carreTecnicaId = 3, carreraTecnica = "Técnico en Diseño Gráfico" }
                    );
                });

            modelBuilder.Entity("TUNIWEB.Models.catalogoDeMapasCurriculares", b =>
                {
                    b.Property<int>("noDeMapaCurricular")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("doc");

                    b.Property<int>("idCarrera");

                    b.Property<Guid>("idUniversidad");

                    b.Property<string>("mapacurricular");

                    b.HasKey("noDeMapaCurricular");

                    b.HasIndex("idUniversidad");

                    b.ToTable("catalogoDeMapasCuarriculares");
                });

            modelBuilder.Entity("TUNIWEB.Models.catCarreras", b =>
                {
                    b.Property<int>("idCarrera")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Carrera");

                    b.Property<int>("areasCarreraId");

                    b.Property<int>("areasTestId");

                    b.HasKey("idCarrera");

                    b.HasIndex("areasCarreraId");

                    b.HasIndex("areasTestId");

                    b.ToTable("catCarreras");

                    b.HasData(
                        new { idCarrera = 1, Carrera = "Ingeniería en Comunicaciones y Electrónica", areasCarreraId = 1, areasTestId = 6 },
                        new { idCarrera = 2, Carrera = "Ingeniería Aeronáutica", areasCarreraId = 1, areasTestId = 9 },
                        new { idCarrera = 3, Carrera = "Ingeniería en Control y Automatización", areasCarreraId = 1, areasTestId = 6 },
                        new { idCarrera = 4, Carrera = "Ingenieria en informatica", areasCarreraId = 1, areasTestId = 8 },
                        new { idCarrera = 5, Carrera = "Ingeniería en Inteligencia Artificial", areasCarreraId = 1, areasTestId = 7 },
                        new { idCarrera = 6, Carrera = "Ingeniería en Metalurgia y Materiales", areasCarreraId = 1, areasTestId = 11 },
                        new { idCarrera = 7, Carrera = "Ingenieria en Negocios Energeticos Sustentables", areasCarreraId = 1, areasTestId = 2 },
                        new { idCarrera = 8, Carrera = "Ingenieria en Robotica Industrial", areasCarreraId = 1, areasTestId = 7 },
                        new { idCarrera = 9, Carrera = "Ingenieria en Sistemas Automotrices", areasCarreraId = 1, areasTestId = 7 },
                        new { idCarrera = 10, Carrera = "Ingenieria en Sistemas Computacionales", areasCarreraId = 1, areasTestId = 9 },
                        new { idCarrera = 11, Carrera = "Ingenieria en sistemas Energeticos y Redes Inteligentes", areasCarreraId = 1, areasTestId = 8 },
                        new { idCarrera = 12, Carrera = "Ingenieria Quimica Industrial", areasCarreraId = 1, areasTestId = 7 },
                        new { idCarrera = 13, Carrera = "Ingenieria Quimica Petrolera", areasCarreraId = 1, areasTestId = 7 },
                        new { idCarrera = 14, Carrera = "Ingenieria Telemeatica", areasCarreraId = 1, areasTestId = 7 },
                        new { idCarrera = 15, Carrera = "Ingenieria Textil", areasCarreraId = 1, areasTestId = 6 },
                        new { idCarrera = 16, Carrera = "Ingeniero Arquitecto", areasCarreraId = 1, areasTestId = 11 },
                        new { idCarrera = 17, Carrera = "Ingenieria Metalirgica", areasCarreraId = 1, areasTestId = 4 },
                        new { idCarrera = 18, Carrera = "Ingenieria Matematica", areasCarreraId = 1, areasTestId = 11 },
                        new { idCarrera = 19, Carrera = "Ingenieria en Transporte", areasCarreraId = 1, areasTestId = 8 },
                        new { idCarrera = 20, Carrera = "Ingenieria Farmaceutica", areasCarreraId = 1, areasTestId = 11 },
                        new { idCarrera = 21, Carrera = "Ingenieria Topografica y Fotogrametrica", areasCarreraId = 1, areasTestId = 1 },
                        new { idCarrera = 22, Carrera = "Licenciatura en ciencia de datos", areasCarreraId = 1, areasTestId = 10 },
                        new { idCarrera = 23, Carrera = "Licenciatura en Ciencias de la Informatica", areasCarreraId = 1, areasTestId = 7 },
                        new { idCarrera = 24, Carrera = "Licenciatura en Fisica y Matematicas", areasCarreraId = 1, areasTestId = 7 },
                        new { idCarrera = 25, Carrera = "Ingenieria Biomedica", areasCarreraId = 1, areasTestId = 8 },
                        new { idCarrera = 26, Carrera = "Ingenieria Biomedica", areasCarreraId = 1, areasTestId = 7 },
                        new { idCarrera = 27, Carrera = "Ingenieria Bionica", areasCarreraId = 1, areasTestId = 11 },
                        new { idCarrera = 28, Carrera = "Ingenieria Bioquimica", areasCarreraId = 1, areasTestId = 11 },
                        new { idCarrera = 29, Carrera = "Ingenieria Biotecnologica", areasCarreraId = 1, areasTestId = 9 },
                        new { idCarrera = 30, Carrera = "Ingenieria Civil", areasCarreraId = 1, areasTestId = 9 },
                        new { idCarrera = 31, Carrera = "Actuaria", areasCarreraId = 1, areasTestId = 8 },
                        new { idCarrera = 32, Carrera = "Arquitectura", areasCarreraId = 1, areasTestId = 4 },
                        new { idCarrera = 33, Carrera = "Arquitectura de Paisajes", areasCarreraId = 1, areasTestId = 4 },
                        new { idCarrera = 34, Carrera = "Ciencias de Datos", areasCarreraId = 1, areasTestId = 8 },
                        new { idCarrera = 35, Carrera = "Ciencias de Materiales Sustentables", areasCarreraId = 1, areasTestId = 9 },
                        new { idCarrera = 36, Carrera = "Ciencias de la Computacion", areasCarreraId = 1, areasTestId = 7 },
                        new { idCarrera = 37, Carrera = "Ciencias de la Tierra", areasCarreraId = 1, areasTestId = 7 },
                        new { idCarrera = 38, Carrera = "Diseño Industrial", areasCarreraId = 1, areasTestId = 11 },
                        new { idCarrera = 39, Carrera = "Fisica", areasCarreraId = 1, areasTestId = 7 },
                        new { idCarrera = 40, Carrera = "Fisica Biomedica", areasCarreraId = 1, areasTestId = 7 },
                        new { idCarrera = 41, Carrera = "Geociencias", areasCarreraId = 1, areasTestId = 10 },
                        new { idCarrera = 42, Carrera = "Ingenieria Ambiental", areasCarreraId = 1, areasTestId = 8 },
                        new { idCarrera = 43, Carrera = "Ingenieria de Minas y Metalurgia", areasCarreraId = 1, areasTestId = 10 },
                        new { idCarrera = 44, Carrera = "Ingenieria Electrica Electronica", areasCarreraId = 1, areasTestId = 11 },
                        new { idCarrera = 45, Carrera = "Ingenieria en Computacion", areasCarreraId = 1, areasTestId = 11 },
                        new { idCarrera = 46, Carrera = "Ingenieria en Energias Renovables", areasCarreraId = 1, areasTestId = 11 },
                        new { idCarrera = 47, Carrera = "Ingenieria en Sistemas Biomedicos", areasCarreraId = 1, areasTestId = 8 },
                        new { idCarrera = 48, Carrera = "Ingenieria en Telecomunicaicones", areasCarreraId = 1, areasTestId = 8 },
                        new { idCarrera = 49, Carrera = "Ingenieria en Telecomunicaciones, Sistemas y Electronica", areasCarreraId = 1, areasTestId = 7 },
                        new { idCarrera = 50, Carrera = "Ingenieria Geofisica", areasCarreraId = 1, areasTestId = 10 },
                        new { idCarrera = 51, Carrera = "Ingenieria Geologica", areasCarreraId = 1, areasTestId = 10 },
                        new { idCarrera = 52, Carrera = "Ingenieria Geomatica", areasCarreraId = 1, areasTestId = 10 },
                        new { idCarrera = 53, Carrera = "Ingenieria Industrial", areasCarreraId = 1, areasTestId = 8 },
                        new { idCarrera = 54, Carrera = "Ingenieria Mecanica", areasCarreraId = 1, areasTestId = 8 },
                        new { idCarrera = 55, Carrera = "Ingenieria Mecanica Electrica", areasCarreraId = 1, areasTestId = 8 },
                        new { idCarrera = 56, Carrera = "Ingenieria Mecatronica", areasCarreraId = 1, areasTestId = 7 },
                        new { idCarrera = 57, Carrera = "Ingenieria Petrolera", areasCarreraId = 1, areasTestId = 7 },
                        new { idCarrera = 58, Carrera = "Ingenieria Quimica", areasCarreraId = 1, areasTestId = 7 },
                        new { idCarrera = 59, Carrera = "Ingenieria Quimica Metalurgica", areasCarreraId = 1, areasTestId = 9 },
                        new { idCarrera = 60, Carrera = "Matematicas", areasCarreraId = 1, areasTestId = 6 },
                        new { idCarrera = 61, Carrera = "Matematicas Aplicadas", areasCarreraId = 1, areasTestId = 6 },
                        new { idCarrera = 62, Carrera = "Matematicas Aplicadas y Computacion", areasCarreraId = 1, areasTestId = 6 },
                        new { idCarrera = 63, Carrera = "Nanotecnologia", areasCarreraId = 1, areasTestId = 7 },
                        new { idCarrera = 64, Carrera = "Tecnologia", areasCarreraId = 1, areasTestId = 7 },
                        new { idCarrera = 65, Carrera = "Tecnologias para la informacion en Cinecias", areasCarreraId = 1, areasTestId = 7 },
                        new { idCarrera = 66, Carrera = "Urbanismo", areasCarreraId = 1, areasTestId = 1 },
                        new { idCarrera = 67, Carrera = "Licenciado en Nutricion", areasCarreraId = 2, areasTestId = 1 },
                        new { idCarrera = 68, Carrera = "Licenciado en Optometria", areasCarreraId = 2, areasTestId = 1 },
                        new { idCarrera = 69, Carrera = "Licenciado en Biologia", areasCarreraId = 2, areasTestId = 7 },
                        new { idCarrera = 70, Carrera = "Licenciado en Diagnostica", areasCarreraId = 2, areasTestId = 1 },
                        new { idCarrera = 71, Carrera = "Quimico Farmaceutico Indisctrial", areasCarreraId = 2, areasTestId = 7 },
                        new { idCarrera = 72, Carrera = "Medico Cirujano Homeopata", areasCarreraId = 2, areasTestId = 1 },
                        new { idCarrera = 73, Carrera = "Medico Cirujano Partero", areasCarreraId = 2, areasTestId = 11 },
                        new { idCarrera = 74, Carrera = "Quimico Bacteriologo Parasitologo", areasCarreraId = 2, areasTestId = 11 },
                        new { idCarrera = 75, Carrera = "Ciencia Forense", areasCarreraId = 2, areasTestId = 11 },
                        new { idCarrera = 76, Carrera = "Ciencias Agroforestales", areasCarreraId = 2, areasTestId = 10 },
                        new { idCarrera = 77, Carrera = "Ciencias Agrogenomicas", areasCarreraId = 2, areasTestId = 10 },
                        new { idCarrera = 78, Carrera = "Ciencias Ambientales", areasCarreraId = 2, areasTestId = 10 },
                        new { idCarrera = 79, Carrera = "Ciencias Genomicas", areasCarreraId = 2, areasTestId = 10 },
                        new { idCarrera = 80, Carrera = "Cirujano Dentista", areasCarreraId = 2, areasTestId = 1 },
                        new { idCarrera = 81, Carrera = "Ecologia", areasCarreraId = 2, areasTestId = 1 },
                        new { idCarrera = 82, Carrera = "Licenciatura en Enfermeria", areasCarreraId = 2, areasTestId = 1 },
                        new { idCarrera = 83, Carrera = "Licenciatura en enfermeria y Obstetricia", areasCarreraId = 2, areasTestId = 1 },
                        new { idCarrera = 84, Carrera = "Farmacia", areasCarreraId = 2, areasTestId = 1 },
                        new { idCarrera = 85, Carrera = "Fisioterapia", areasCarreraId = 2, areasTestId = 1 },
                        new { idCarrera = 86, Carrera = "Ingenieria Agricola", areasCarreraId = 2, areasTestId = 10 },
                        new { idCarrera = 87, Carrera = "Ingenieria en Alimentos", areasCarreraId = 2, areasTestId = 2 },
                        new { idCarrera = 88, Carrera = "Investigacion Biomedica Basica", areasCarreraId = 2, areasTestId = 7 },
                        new { idCarrera = 89, Carrera = "Manejo Sustentable de Zonas Costeras", areasCarreraId = 2, areasTestId = 2 },
                        new { idCarrera = 90, Carrera = "Medico Cirujano", areasCarreraId = 2, areasTestId = 1 },
                        new { idCarrera = 91, Carrera = "Medicina Veterinaria y Zootecnia", areasCarreraId = 2, areasTestId = 7 },
                        new { idCarrera = 92, Carrera = "Licenciatura en Medicina", areasCarreraId = 2, areasTestId = 2 },
                        new { idCarrera = 93, Carrera = "Neurociencias", areasCarreraId = 2, areasTestId = 7 },
                        new { idCarrera = 94, Carrera = "Nutriologia", areasCarreraId = 2, areasTestId = 1 },
                        new { idCarrera = 95, Carrera = "Licenciado en Odontologia", areasCarreraId = 2, areasTestId = 1 },
                        new { idCarrera = 96, Carrera = "Optometria", areasCarreraId = 2, areasTestId = 2 },
                        new { idCarrera = 97, Carrera = "Ortesis y protesis", areasCarreraId = 2, areasTestId = 9 },
                        new { idCarrera = 98, Carrera = "Licenciado en Psicologia", areasCarreraId = 2, areasTestId = 1 },
                        new { idCarrera = 99, Carrera = "Quimica", areasCarreraId = 2, areasTestId = 7 },
                        new { idCarrera = 100, Carrera = "Quimica de Alimentos", areasCarreraId = 2, areasTestId = 7 },
                        new { idCarrera = 101, Carrera = "Quimica e Ingenieria en Materiales", areasCarreraId = 2, areasTestId = 7 },
                        new { idCarrera = 102, Carrera = "Quimica Farmaceuticao Biologica", areasCarreraId = 2, areasTestId = 7 },
                        new { idCarrera = 103, Carrera = "Quimica Industrial", areasCarreraId = 2, areasTestId = 7 },
                        new { idCarrera = 104, Carrera = "Contador Publico", areasCarreraId = 3, areasTestId = 8 },
                        new { idCarrera = 105, Carrera = "Licenciatura en Administracion Industrial", areasCarreraId = 3, areasTestId = 2 },
                        new { idCarrera = 106, Carrera = "Administracion", areasCarreraId = 3, areasTestId = 2 },
                        new { idCarrera = 107, Carrera = "Administracion Agropecuaria", areasCarreraId = 3, areasTestId = 2 },
                        new { idCarrera = 108, Carrera = "Antropologia", areasCarreraId = 3, areasTestId = 7 },
                        new { idCarrera = 109, Carrera = "Ciencias de la Comunicacion", areasCarreraId = 3, areasTestId = 3 },
                        new { idCarrera = 110, Carrera = "Ciencias Politicas y Administracion Publica", areasCarreraId = 3, areasTestId = 2 },
                        new { idCarrera = 111, Carrera = "Licenciatura en Administracion y Desarrollo Empresarial", areasCarreraId = 3, areasTestId = 6 },
                        new { idCarrera = 112, Carrera = "Licenciatura en Archivonomia", areasCarreraId = 3, areasTestId = 6 },
                        new { idCarrera = 113, Carrera = "Licencitura en Bibliotecnomia", areasCarreraId = 3, areasTestId = 6 },
                        new { idCarrera = 114, Carrera = "Comunicacion", areasCarreraId = 3, areasTestId = 3 },
                        new { idCarrera = 115, Carrera = "Comunicacion y Periodismo", areasCarreraId = 3, areasTestId = 3 },
                        new { idCarrera = 116, Carrera = "Contaduria", areasCarreraId = 3, areasTestId = 6 },
                        new { idCarrera = 117, Carrera = "Licenciado en Relaciones Comerciales", areasCarreraId = 3, areasTestId = 1 },
                        new { idCarrera = 118, Carrera = "Licenciado en Turismo", areasCarreraId = 3, areasTestId = 1 },
                        new { idCarrera = 119, Carrera = "Derecho", areasCarreraId = 3, areasTestId = 1 },
                        new { idCarrera = 120, Carrera = "Desarrollo Comunitario para el Envejecimiento", areasCarreraId = 3, areasTestId = 1 },
                        new { idCarrera = 121, Carrera = "Desarrollo Territorial", areasCarreraId = 3, areasTestId = 2 },
                        new { idCarrera = 122, Carrera = "Licenciatura en Economia", areasCarreraId = 3, areasTestId = 2 },
                        new { idCarrera = 123, Carrera = "Economia Industrial", areasCarreraId = 3, areasTestId = 2 },
                        new { idCarrera = 124, Carrera = "Estudios Sociales y Gestion Local", areasCarreraId = 3, areasTestId = 1 },
                        new { idCarrera = 125, Carrera = "Geografia", areasCarreraId = 3, areasTestId = 8 },
                        new { idCarrera = 126, Carrera = "Geografia Aplicada", areasCarreraId = 3, areasTestId = 8 },
                        new { idCarrera = 127, Carrera = "Licenciatura en Negocios Internacionales", areasCarreraId = 3, areasTestId = 3 },
                        new { idCarrera = 128, Carrera = "Planificacion para el Desarrollo Agropecuario", areasCarreraId = 3, areasTestId = 1 },
                        new { idCarrera = 129, Carrera = "Relaciones Internacionales", areasCarreraId = 3, areasTestId = 3 },
                        new { idCarrera = 130, Carrera = "Sociologia", areasCarreraId = 3, areasTestId = 1 },
                        new { idCarrera = 131, Carrera = "Licenciatura en Tabajo Social", areasCarreraId = 3, areasTestId = 1 },
                        new { idCarrera = 132, Carrera = "Administracion de Arcivos y Gestion Documental", areasCarreraId = 4, areasTestId = 6 },
                        new { idCarrera = 133, Carrera = "Arte y Diseño", areasCarreraId = 4, areasTestId = 4 },
                        new { idCarrera = 134, Carrera = "Artes Visuales", areasCarreraId = 4, areasTestId = 4 },
                        new { idCarrera = 135, Carrera = "Bibliotecologia y Estudios de la informacion", areasCarreraId = 4, areasTestId = 6 },
                        new { idCarrera = 136, Carrera = "Cinematografia", areasCarreraId = 4, areasTestId = 4 },
                        new { idCarrera = 137, Carrera = "Desarrollo y Gestion Interculturales", areasCarreraId = 4, areasTestId = 6 },
                        new { idCarrera = 138, Carrera = "Diseño Grafico", areasCarreraId = 4, areasTestId = 4 },
                        new { idCarrera = 139, Carrera = "Diseño y Comunicacion Visual", areasCarreraId = 4, areasTestId = 4 },
                        new { idCarrera = 140, Carrera = "Enseñanza de Lengua Extranjera", areasCarreraId = 4, areasTestId = 1 },
                        new { idCarrera = 141, Carrera = "Enseñansa de Ingles", areasCarreraId = 4, areasTestId = 1 },
                        new { idCarrera = 142, Carrera = "Estudios Latinoamericanos", areasCarreraId = 4, areasTestId = 1 },
                        new { idCarrera = 143, Carrera = "Etnomusicologia", areasCarreraId = 4, areasTestId = 5 },
                        new { idCarrera = 144, Carrera = "Filosofia", areasCarreraId = 4, areasTestId = 7 },
                        new { idCarrera = 145, Carrera = "Geohistoria", areasCarreraId = 4, areasTestId = 7 },
                        new { idCarrera = 146, Carrera = "Historia", areasCarreraId = 4, areasTestId = 7 },
                        new { idCarrera = 147, Carrera = "Historia del Arte", areasCarreraId = 4, areasTestId = 7 },
                        new { idCarrera = 148, Carrera = "Lengua y literaturas Hispanicas", areasCarreraId = 4, areasTestId = 3 },
                        new { idCarrera = 149, Carrera = "Lengua y literaturas Modernas", areasCarreraId = 4, areasTestId = 3 },
                        new { idCarrera = 150, Carrera = "lenguas Clasicas", areasCarreraId = 4, areasTestId = 3 },
                        new { idCarrera = 151, Carrera = "Linguistica Aplicada", areasCarreraId = 4, areasTestId = 3 },
                        new { idCarrera = 152, Carrera = "Literatura Dramatica y Teatro", areasCarreraId = 4, areasTestId = 4 },
                        new { idCarrera = 153, Carrera = "Literatura Intercultural", areasCarreraId = 4, areasTestId = 3 },
                        new { idCarrera = 154, Carrera = "Musica Canto", areasCarreraId = 4, areasTestId = 5 },
                        new { idCarrera = 155, Carrera = "Musica Composicion", areasCarreraId = 4, areasTestId = 5 },
                        new { idCarrera = 156, Carrera = "Musica Educacion Musical", areasCarreraId = 4, areasTestId = 1 },
                        new { idCarrera = 157, Carrera = "Musica Instrumentista", areasCarreraId = 4, areasTestId = 5 },
                        new { idCarrera = 158, Carrera = "Musica Piano", areasCarreraId = 4, areasTestId = 5 },
                        new { idCarrera = 159, Carrera = "Musica y Tecnologia Artistica", areasCarreraId = 4, areasTestId = 5 },
                        new { idCarrera = 160, Carrera = "Pedagogia", areasCarreraId = 4, areasTestId = 1 },
                        new { idCarrera = 161, Carrera = "Teatro y actuacion", areasCarreraId = 4, areasTestId = 4 },
                        new { idCarrera = 162, Carrera = "Traduccion", areasCarreraId = 4, areasTestId = 3 }
                    );
                });

            modelBuilder.Entity("TUNIWEB.Models.Comentarios", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("IdPublicacion");

                    b.Property<Guid>("IdUsuario");

                    b.Property<string>("comentario")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("IdUsuario");

                    b.ToTable("commentarios");
                });

            modelBuilder.Entity("TUNIWEB.Models.contactos", b =>
                {
                    b.Property<int>("noDeContacto")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("contacto");

                    b.Property<Guid>("idUniversidad");

                    b.HasKey("noDeContacto");

                    b.HasIndex("idUniversidad");

                    b.ToTable("contactos");
                });

            modelBuilder.Entity("TUNIWEB.Models.DatosAcademicos", b =>
                {
                    b.Property<Guid>("idAlumno");

                    b.Property<string>("boletaGlobal");

                    b.Property<byte[]>("doc");

                    b.HasKey("idAlumno");

                    b.ToTable("datosAcademicos");
                });

            modelBuilder.Entity("TUNIWEB.Models.egreso", b =>
                {
                    b.Property<Guid>("idUniversidad");

                    b.Property<byte[]>("doc");

                    b.Property<string>("nivelEgreso");

                    b.HasKey("idUniversidad");

                    b.ToTable("egresos");
                });

            modelBuilder.Entity("TUNIWEB.Models.empresaAsociadas", b =>
                {
                    b.Property<int>("noDeEmpresaAsociada")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("empresaAsociada");

                    b.Property<Guid>("idUniversidad");

                    b.HasKey("noDeEmpresaAsociada");

                    b.HasIndex("idUniversidad");

                    b.ToTable("empresaAsociadas");
                });

            modelBuilder.Entity("TUNIWEB.Models.historialdeaceptados", b =>
                {
                    b.Property<int>("nodeaceptado")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("idalumno");

                    b.Property<Guid>("iduniversidad");

                    b.HasKey("nodeaceptado");

                    b.ToTable("aceptados");
                });

            modelBuilder.Entity("TUNIWEB.Models.historialrechazos", b =>
                {
                    b.Property<int>("noderechazo")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("idAlumno");

                    b.Property<Guid>("idUniversidad");

                    b.HasKey("noderechazo");

                    b.ToTable("rechazos");
                });

            modelBuilder.Entity("TUNIWEB.Models.informacion", b =>
                {
                    b.Property<int>("idnoRecon")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("doc");

                    b.Property<Guid>("idAlumno");

                    b.Property<string>("reconocimiento");

                    b.HasKey("idnoRecon");

                    b.HasIndex("idAlumno");

                    b.ToTable("informaciones");
                });

            modelBuilder.Entity("TUNIWEB.Models.ingreso", b =>
                {
                    b.Property<Guid>("idUniversidad");

                    b.Property<byte[]>("doc");

                    b.Property<string>("metodoIngreso");

                    b.HasKey("idUniversidad");

                    b.ToTable("ingresos");
                });

            modelBuilder.Entity("TUNIWEB.Models.PreguntasTestVocacional", b =>
                {
                    b.Property<int>("PregunataId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("pregunta");

                    b.HasKey("PregunataId");

                    b.ToTable("preguntasDelTestVocacional");

                    b.HasData(
                        new { PregunataId = 1, pregunta = "Atender y cuidar enfermos" },
                        new { PregunataId = 2, pregunta = "Intervenir activamente en las discuciones de la clase" },
                        new { PregunataId = 3, pregunta = "Escribir cuentos, cronicas o articulos" },
                        new { PregunataId = 4, pregunta = "Dibujar y pintar" },
                        new { PregunataId = 5, pregunta = "Cantar o tocar un instrumento en publico" },
                        new { PregunataId = 6, pregunta = "Llevar en orden tus libros y cuadernos" },
                        new { PregunataId = 7, pregunta = "Conocer y estudiar la estructura de las plantas y de los animales" },
                        new { PregunataId = 8, pregunta = "Resolver cuestionarios de matematicas" },
                        new { PregunataId = 9, pregunta = "Armar y desarmar objetos mecanicos" },
                        new { PregunataId = 10, pregunta = "Salir de excursion" },
                        new { PregunataId = 11, pregunta = "Proteger a los muchachos menores del grupo" },
                        new { PregunataId = 12, pregunta = "Ser jefe de un grupo" },
                        new { PregunataId = 13, pregunta = "Leer obras literarios" },
                        new { PregunataId = 14, pregunta = "Moldear el barrio, plastilina o cualquier otro material" },
                        new { PregunataId = 15, pregunta = "Escuchar musica clasica" },
                        new { PregunataId = 16, pregunta = "Ordenar y clasificar los libro de una biblioteca" },
                        new { PregunataId = 17, pregunta = "Hacer experimentos en un laboratorio" },
                        new { PregunataId = 18, pregunta = "Resolver problemas de aritmetica" },
                        new { PregunataId = 19, pregunta = "Manejar herramientas y maquinaria" },
                        new { PregunataId = 20, pregunta = "Pertenecer a un grupo de exploradores" },
                        new { PregunataId = 21, pregunta = "Ser miembro de una sociedad de ayuda y asistencia" },
                        new { PregunataId = 22, pregunta = "Dirigir la campaña politica para un candidato estudiantil" },
                        new { PregunataId = 23, pregunta = "Hacer versos para una publicacion" },
                        new { PregunataId = 24, pregunta = "Encargarte del decorado del lugar para un festival" },
                        new { PregunataId = 25, pregunta = "Aprender a tocar un instrumento musical" },
                        new { PregunataId = 26, pregunta = "Aprender a usar programas de programacion" },
                        new { PregunataId = 27, pregunta = "Investigar el origen de las costumbres de los pueblos" },
                        new { PregunataId = 28, pregunta = "LLevar las cuentas de una institucion" },
                        new { PregunataId = 29, pregunta = "Construir objeto o muebles" },
                        new { PregunataId = 30, pregunta = "Trabajar al aire libre, fuera de la ciudad" },
                        new { PregunataId = 31, pregunta = "Cuidar a niños pequeños" },
                        new { PregunataId = 32, pregunta = "Ver a tus amigos organizar una fiesta con ellos" },
                        new { PregunataId = 33, pregunta = "Escribir mensajes electronicos o chatear con tus amigos por Internet" },
                        new { PregunataId = 34, pregunta = "Realizar una actividad artistica" },
                        new { PregunataId = 35, pregunta = "Interprete musical del genero de tu preferencia" },
                        new { PregunataId = 36, pregunta = "Diseñador de software" },
                        new { PregunataId = 37, pregunta = "Asistir a una conferencia cientifica a un museo" },
                        new { PregunataId = 38, pregunta = "Calcular el presupuesto de una familia" },
                        new { PregunataId = 39, pregunta = "Reparar algun aparato descompuesto" },
                        new { PregunataId = 40, pregunta = "Ir de paseo al campo o a la playa" },
                        new { PregunataId = 41, pregunta = "Ser miembro especial de la Cruz Roja Internacional para casos de desastre" },
                        new { PregunataId = 42, pregunta = "Gerente de mercadotecnia de una compañia" },
                        new { PregunataId = 43, pregunta = "Articulista de un periodico" },
                        new { PregunataId = 44, pregunta = "Dieseñador de las portadas de una revista" },
                        new { PregunataId = 45, pregunta = "Tocar en la orquesta de tu ciudad" },
                        new { PregunataId = 46, pregunta = "Poner en orden tu coleccion favorita" },
                        new { PregunataId = 47, pregunta = "Coordinador de un grupo cientifico de vanguardia" },
                        new { PregunataId = 48, pregunta = "Contador general de una empresa" },
                        new { PregunataId = 49, pregunta = "Autoridad en la construccion de ciertas estructuras arquitectonocas" },
                        new { PregunataId = 50, pregunta = "Encargado de la ampliacion de la red carretera del pais" }
                    );
                });

            modelBuilder.Entity("TUNIWEB.Models.Publicaciones", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("doc");

                    b.Property<DateTime>("fechaPublicacion");

                    b.Property<Guid>("idUsuario");

                    b.Property<string>("texto")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<int>("visitas");

                    b.HasKey("Id");

                    b.HasIndex("idUsuario");

                    b.ToTable("publicaciones");
                });

            modelBuilder.Entity("TUNIWEB.Models.Relacion", b =>
                {
                    b.Property<int>("nodeRelacion")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("idAlumno");

                    b.Property<Guid>("idUniversidad");

                    b.HasKey("nodeRelacion");

                    b.HasIndex("idAlumno");

                    b.HasIndex("idUniversidad");

                    b.ToTable("Relaciones");
                });

            modelBuilder.Entity("TUNIWEB.Models.solicitudes", b =>
                {
                    b.Property<int>("nodesolicitud")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("idAlumno");

                    b.Property<Guid>("idUniversidad");

                    b.HasKey("nodesolicitud");

                    b.HasIndex("idAlumno")
                        .IsUnique();

                    b.HasIndex("idUniversidad")
                        .IsUnique();

                    b.ToTable("solicitar");
                });

            modelBuilder.Entity("TUNIWEB.Models.universidad", b =>
                {
                    b.Property<Guid>("idUnversidad");

                    b.Property<string>("direccion");

                    b.Property<string>("nombre");

                    b.HasKey("idUnversidad");

                    b.ToTable("universidades");
                });

            modelBuilder.Entity("TUNIWEB.Models.UsuarioAlumno", b =>
                {
                    b.Property<Guid>("idAlumno")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("contraseña")
                        .IsRequired();

                    b.Property<string>("usuario")
                        .IsRequired();

                    b.HasKey("idAlumno");

                    b.ToTable("alumnosUsuarios");
                });

            modelBuilder.Entity("TUNIWEB.Models.UsuarioUniversidad", b =>
                {
                    b.Property<Guid>("idUniversidad")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("contraseña");

                    b.Property<string>("usuario");

                    b.HasKey("idUniversidad");

                    b.ToTable("universidadesUsuario");
                });

            modelBuilder.Entity("TUNIWEB.Models.ValorPregunta", b =>
                {
                    b.Property<int>("noDePregunta")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("areasTestID");

                    b.Property<Guid>("idAlumno");

                    b.Property<int>("idPregunta");

                    b.Property<int>("valor");

                    b.HasKey("noDePregunta");

                    b.HasIndex("areasTestID");

                    b.HasIndex("idAlumno");

                    b.HasIndex("idPregunta");

                    b.ToTable("valorPreguntas");
                });

            modelBuilder.Entity("TUNIWEB.Models.Alumno", b =>
                {
                    b.HasOne("TUNIWEB.Models.UsuarioAlumno", "relAl_Us")
                        .WithOne("relUs_Al")
                        .HasForeignKey("TUNIWEB.Models.Alumno", "idAlumno")
                        .HasConstraintName("Relacion_usuario_alumno")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TUNIWEB.Models.carBeca", b =>
                {
                    b.HasOne("TUNIWEB.Models.UsuarioUniversidad", "relCB_USU")
                        .WithMany("relUSU_carB")
                        .HasForeignKey("idUniversidad")
                        .HasConstraintName("Relacion_usuario_becas")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TUNIWEB.Models.carrerasDeseadas", b =>
                {
                    b.HasOne("TUNIWEB.Models.UsuarioAlumno", "relCarrD_AL")
                        .WithMany("relAL_CARRD")
                        .HasForeignKey("idAlumno")
                        .HasConstraintName("Relacion_usuario_carreraDeseada")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TUNIWEB.Models.catCarreras", "relCarrD_catcarr")
                        .WithMany("relcatcarr_carrD")
                        .HasForeignKey("idCarrera")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TUNIWEB.Models.carrerasimpartidas", b =>
                {
                    b.HasOne("TUNIWEB.Models.catCarreras", "relcarri_catcarr")
                        .WithMany("relcarr_carri")
                        .HasForeignKey("catCarrerasId")
                        .HasConstraintName("relacion_cat_imp")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TUNIWEB.Models.UsuarioUniversidad", "relcarri_unius")
                        .WithMany("relusu_carri")
                        .HasForeignKey("usuarioUniversidad")
                        .HasConstraintName("Relacion_Usuario_carrerasimpartidas")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TUNIWEB.Models.carreraTecnica", b =>
                {
                    b.HasOne("TUNIWEB.Models.UsuarioAlumno", "relCarrT_Al")
                        .WithMany("relUs_Cart")
                        .HasForeignKey("idAlumno")
                        .HasConstraintName("Relacion_usuario_carreraTecnica")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TUNIWEB.Models.catalogoCarrerasTecnicas", b =>
                {
                    b.HasOne("TUNIWEB.Models.carreraTecnica", "relcart_Cat")
                        .WithMany("relCat_cart")
                        .HasForeignKey("relcart_Catnoderelcat")
                        .HasConstraintName("Relacion_carreratecnica_catalogodecarrerastecnicas");
                });

            modelBuilder.Entity("TUNIWEB.Models.catalogoDeMapasCurriculares", b =>
                {
                    b.HasOne("TUNIWEB.Models.UsuarioUniversidad", "relCATCU_USU")
                        .WithMany("relUSU_CACU")
                        .HasForeignKey("idUniversidad")
                        .HasConstraintName("Relacion_usuario_CatalogoCurriculares")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TUNIWEB.Models.catCarreras", b =>
                {
                    b.HasOne("TUNIWEB.Models.areasCarrera", "relcarrarea")
                        .WithMany("relareacarr")
                        .HasForeignKey("areasCarreraId")
                        .HasConstraintName("relacion_cat_areas")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TUNIWEB.Models.areasTest", "relareatestcarr")
                        .WithMany("relareasTestcarr")
                        .HasForeignKey("areasTestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TUNIWEB.Models.Comentarios", b =>
                {
                    b.HasOne("TUNIWEB.Models.Publicaciones", "relCom_Pub")
                        .WithMany("relPub_Com")
                        .HasForeignKey("IdUsuario")
                        .HasConstraintName("RelacionComentarioPublicacion")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TUNIWEB.Models.UsuarioAlumno", "relCom_USA")
                        .WithMany("relUSA_COM")
                        .HasForeignKey("IdUsuario")
                        .HasConstraintName("RelacionComentarioUsuarioAlumno")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TUNIWEB.Models.UsuarioUniversidad", "relCom_USU")
                        .WithMany("relUSU_COM")
                        .HasForeignKey("IdUsuario")
                        .HasConstraintName("RelacionComentarioUsuarioUniversidad")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TUNIWEB.Models.contactos", b =>
                {
                    b.HasOne("TUNIWEB.Models.UsuarioUniversidad", "relC_USU")
                        .WithMany("relUSU_CON")
                        .HasForeignKey("idUniversidad")
                        .HasConstraintName("Relacion_usuario_contacto")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TUNIWEB.Models.DatosAcademicos", b =>
                {
                    b.HasOne("TUNIWEB.Models.UsuarioAlumno", "Us_relDaac")
                        .WithOne("relDaac_Us")
                        .HasForeignKey("TUNIWEB.Models.DatosAcademicos", "idAlumno")
                        .HasConstraintName("Relacion_usuario_datosAcademicos")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TUNIWEB.Models.egreso", b =>
                {
                    b.HasOne("TUNIWEB.Models.UsuarioUniversidad", "relE_USU")
                        .WithOne("relUSU_E")
                        .HasForeignKey("TUNIWEB.Models.egreso", "idUniversidad")
                        .HasConstraintName("Relacion_usuario_egreso")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TUNIWEB.Models.empresaAsociadas", b =>
                {
                    b.HasOne("TUNIWEB.Models.UsuarioUniversidad", "relEA_USU")
                        .WithMany("relUSU_EA")
                        .HasForeignKey("idUniversidad")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TUNIWEB.Models.informacion", b =>
                {
                    b.HasOne("TUNIWEB.Models.UsuarioAlumno", "info_usuario")
                        .WithMany("rel_us_info")
                        .HasForeignKey("idAlumno")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TUNIWEB.Models.ingreso", b =>
                {
                    b.HasOne("TUNIWEB.Models.UsuarioUniversidad", "relI_USU")
                        .WithOne("relUSU_I")
                        .HasForeignKey("TUNIWEB.Models.ingreso", "idUniversidad")
                        .HasConstraintName("Relacion_usuario_ingreso")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TUNIWEB.Models.Publicaciones", b =>
                {
                    b.HasOne("TUNIWEB.Models.UsuarioAlumno", "relPub_USA")
                        .WithMany("relUsa_Pu")
                        .HasForeignKey("idUsuario")
                        .HasConstraintName("RelacionPublicacionAlumno")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TUNIWEB.Models.UsuarioUniversidad", "relPub_USU")
                        .WithMany("relUSU_PU")
                        .HasForeignKey("idUsuario")
                        .HasConstraintName("RelacionPublicacionUniversidad")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TUNIWEB.Models.Relacion", b =>
                {
                    b.HasOne("TUNIWEB.Models.UsuarioAlumno", "relrel_USA")
                        .WithMany("relUSA_REL")
                        .HasForeignKey("idAlumno")
                        .HasConstraintName("Relacion_usuario_relacion")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TUNIWEB.Models.UsuarioUniversidad", "relrel_USU")
                        .WithMany("relUSU_REL")
                        .HasForeignKey("idUniversidad")
                        .HasConstraintName("Relacion_Usuario_universidad_rel")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TUNIWEB.Models.solicitudes", b =>
                {
                    b.HasOne("TUNIWEB.Models.UsuarioAlumno", "relsAl")
                        .WithOne("relAs")
                        .HasForeignKey("TUNIWEB.Models.solicitudes", "idAlumno")
                        .HasConstraintName("RelacionsolicitudAlumno")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TUNIWEB.Models.UsuarioUniversidad", "relsU")
                        .WithOne("relUS")
                        .HasForeignKey("TUNIWEB.Models.solicitudes", "idUniversidad")
                        .HasConstraintName("RelacionsolicutudUni")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TUNIWEB.Models.universidad", b =>
                {
                    b.HasOne("TUNIWEB.Models.UsuarioUniversidad", "relU_USU")
                        .WithOne("relUSU_U")
                        .HasForeignKey("TUNIWEB.Models.universidad", "idUnversidad")
                        .HasConstraintName("Relacion_usuarioUniversidad_universidad")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TUNIWEB.Models.ValorPregunta", b =>
                {
                    b.HasOne("TUNIWEB.Models.areasTest", "rel_valor_area")
                        .WithMany("rel_area_valor")
                        .HasForeignKey("areasTestID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TUNIWEB.Models.UsuarioAlumno", "rel_valorpregutna_us")
                        .WithMany("relUSA_VALP")
                        .HasForeignKey("idAlumno")
                        .HasConstraintName("Relacion_usuario_test")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TUNIWEB.Models.PreguntasTestVocacional", "rel_valorpregunta_pregunta")
                        .WithMany("rel_pregunta_valor")
                        .HasForeignKey("idPregunta")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
